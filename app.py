import streamlit as st
import pandas as pd
from streamlit_option_menu import option_menu

from src.visualizacion.Visualizador import Visualizador
# from src.modelos.ModeloML import ModeloML
# from src.eda.ProcesadorEDA import ProcesadorEDA

# ---------------- CONFIGURACI√ìN ----------------
st.set_page_config(page_title="Calidad del Aire en el GAM", layout="wide")

# ---------------- MEN√ö LATERAL ----------------
with st.sidebar:

    menu = option_menu(
        "Men√∫ del Proyecto",
        [
            "Carga de Datos",
            "EDA",
            "Visualizaciones",
            "Modelos",
            "Base de Datos",
            "Acerca de"
        ],
        icons=["folder", "bar-chart", "globe", "cpu", "database", "info-circle"],
        menu_icon="cast",
        default_index=0,
        styles={
            "container": {"padding": "5!important", "background-color": "transparent"},
            "icon": {"color": "black", "font-size": "20px"},
            "nav-link": {
                "font-size": "16px",
                "text-align": "left",
                "margin": "5px",
                "border-radius": "8px",
                "border": "1px solid #ccc",
                "--hover-color": "#eee",
            },
            "nav-link-selected": {"background-color": "#2b8a3e", "color": "white"},
        },
    )

# ---------------- CARGA DE DATOS ----------------
if menu == "Carga de Datos":
    st.title("Carga de Datos del Proyecto")

    try:
        df_cont = pd.read_csv("data/processed/contaminantes.csv", parse_dates=["fecha"])
        df_flujo = pd.read_csv("data/processed/flujo_vehicular.csv", parse_dates=["fecha"])
        df_clima = pd.read_csv("data/processed/clima.csv", parse_dates=["fecha"])

        st.success("‚úÖ Datasets cargados desde 'data/processed/'")
        st.subheader("Contaminantes")
        st.dataframe(df_cont.head())
        st.subheader("Flujo Vehicular")
        st.dataframe(df_flujo.head())
        st.subheader("Clima")
        st.dataframe(df_clima.head())

        # Guardar en sesi√≥n
        st.session_state["contaminantes"] = df_cont
        st.session_state["flujo"] = df_flujo
        st.session_state["clima"] = df_clima

    except FileNotFoundError:
        st.error("‚ùå No se encontraron los archivos procesados.")

# ---------------- EDA ----------------
elif menu == "EDA":
    st.title("An√°lisis Exploratorio de Datos")

    if "contaminantes" in st.session_state and "flujo" in st.session_state:
        df_cont = st.session_state["contaminantes"]
        df_flujo = st.session_state["flujo"]

        # eda = ProcesadorEDA(df_cont, df_flujo)
        st.info("Aqu√≠ ir√°n las funciones del EDA (distribuciones, correlaciones, temporales)")
    else:
        st.warning("Primero carga los datos en 'Carga de Datos'.")

# ---------------- VISUALIZACIONES ----------------
elif menu == "Visualizaciones":
    st.title("Visualizaciones")

    if "contaminantes" in st.session_state and "flujo" in st.session_state and "clima" in st.session_state:
        df_cont = st.session_state["contaminantes"]
        df_flujo = st.session_state["flujo"]
        df_clima = st.session_state["clima"]

        vis = Visualizador(df_cont, df_flujo, df_clima)

        st.subheader("1Ô∏è‚É£ Consumo por hora y d√≠a")
        vis.consumo_hora_dia()

        st.subheader("2Ô∏è‚É£ Demanda bajo distintas condiciones clim√°ticas")
        vis.demanda_condiciones()

        st.subheader("3Ô∏è‚É£ Correlaciones entre contaminantes y clima")
        vis.correlaciones_clima()
    else:
        st.warning("‚ö†Ô∏è Primero carga los datos en 'Carga de Datos'.")

# ---------------- MODELOS ----------------
elif menu == "Modelos":
    st.title("Modelo")

    st.subheader("Regresi√≥n")
    st.write("Predicci√≥n de concentraci√≥n de PM2.5 (ejemplo con Regresi√≥n Lineal, KNN, Random Forest).")

    st.subheader("Clasificaci√≥n")
    st.write("Clasificaci√≥n de calidad del aire seg√∫n ICA (Buena, Moderada, Mala, Muy Mala).")

# ---------------- BASE DE DATOS ----------------
elif menu == "Base de Datos":
    st.title("Conexi√≥n a la Base de Datos")

    try:
        import pyodbc

        conn = pyodbc.connect(
            "DRIVER={ODBC Driver 17 for SQL Server};"
            "SERVER=localhost;DATABASE=CalidadAire;UID=sa;PWD=tu_password"
        )
        st.success("‚úÖ Conexi√≥n exitosa a la base de datos SQL Server")

        query = "SELECT TOP 5 * FROM Contaminantes"
        df_sql = pd.read_sql(query, conn)
        st.dataframe(df_sql)

        conn.close()
    except Exception as e:
        st.error(f"‚ùå Error en la conexi√≥n: {e}")

# ---------------- ACERCA DE ----------------
elif menu == "Acerca de":
    st.title("Acerca del Proyecto")

    st.markdown("""
    ## üéØ Objetivo
    Dise√±ar y desarrollar un proyecto de **Ciencia de Datos en Python** enfocado en una problem√°tica relevante para Costa Rica, como lo es el (an√°lisis sobre la Calidad del Aire en el GAM), integrando diversas fuentes de datos como bases de datos relacionales, APIs p√∫blicas costarricenses e internacionales, y archivos csv reales. El proyecto incluir√°n un an√°lisis exploratorio de datos (EDA), visualizaci√≥n de datos y la aplicaci√≥n de algoritmos de machine learning supervisado. Todo el desarrollo se estructurar√° utilizando principios de programaci√≥n orientada a objetos para fomentar buenas pr√°cticas de dise√±o y mantenimiento del c√≥digo.
    ## üë• Integrantes
    - **Fernando Contreras Artavia**
    - **Victor Rojas Navarro**
    - **Johel Barquero Carvajal**
    ## üõ†Ô∏è Herramientas
    - **Python** (pandas, scikit-learn, matplotlib, seaborn, plotly, streamlit)
    - **SQL Server** para almacenamiento de datos
    - **Git/GitHub** para control de versiones
    ## üöÄ Conclusi√≥n
    El sistema integra **EDA, visualizaci√≥n avanzada, modelos ML y base de datos**
    en una aplicaci√≥n interactiva con **Streamlit**.
    """)