import streamlit as st
import pandas as pd
from src.eda.ProcesadorEDA import ProcesadorEDA

# from src.visualizacion.Visualizador import Visualizador
# from src.modelos.ModeloML import ModeloML

st.set_page_config(page_title="Calidad del Aire en el GAM", layout="wide")

menu = st.sidebar.radio(
    "Men√∫ del Proyecto",
    [
        "Carga de Datos",
        "EDA",
        "Visualizaciones",
        "Modelos",
        "Conclusiones"
    ]
)

# ---------------- CARGA DE DATOS ----------------
if menu == "Carga de Datos":
    st.title("üìÇ Carga de Datos del Proyecto")

    try:
        df_cont = pd.read_csv("data/processed/contaminantes.csv", parse_dates=["fecha"])
        df_flujo = pd.read_csv("data/processed/flujo_vehicular.csv", parse_dates=["fecha"])
        df_clima = pd.read_csv("data/processed/clima.csv", parse_dates=["fecha"])

        st.success("‚úÖ Datasets cargados desde 'data/processed/'")
        st.subheader("Contaminantes")
        st.dataframe(df_cont.head())
        st.subheader("Flujo Vehicular")
        st.dataframe(df_flujo.head())
        st.subheader("Clima")
        st.dataframe(df_clima.head())

        # Guardar en sesi√≥n
        st.session_state["contaminantes"] = df_cont
        st.session_state["flujo"] = df_flujo
        st.session_state["clima"] = df_clima

    except FileNotFoundError:
        st.error("‚ùå No se encontraron los archivos procesados.")

# ---------------- EDA ----------------
elif menu == "EDA":
    st.title("üìä An√°lisis Exploratorio de Datos")

    if "contaminantes" in st.session_state and "flujo" in st.session_state:
        df_cont = st.session_state["contaminantes"]
        df_flujo = st.session_state["flujo"]

        eda = ProcesadorEDA(df_cont)

        st.subheader("Distribuci√≥n de contaminantes")
        eda.distribuciones(["pm2_5", "pm10", "co", "no2", "o3"])

        st.subheader("Correlaciones entre variables")
        eda.correlaciones()

        st.subheader("Patrones temporales de PM2.5")
        eda.temporal("pm2_5")

    else:
        st.warning("Primero carga los datos en 'Carga de Datos'.")

# ---------------- VISUALIZACIONES ----------------
elif menu == "Visualizaciones":
    st.title("üåç Visualizaciones Avanzadas")
    st.info("Aqu√≠ se mostrar√°n mapas de calor y gr√°ficos interactivos seg√∫n ubicaciones de la GAM.")

    # -> Aqu√≠ integrar√°s tu clase Visualizador
    # Ejemplo: mapa de calor con plotly o folium

# ---------------- MODELOS ----------------
elif menu == "Modelos":
    st.title("ü§ñ Modelos Supervisados")

    st.subheader("Regresi√≥n")
    st.write("Predicci√≥n de concentraci√≥n de PM2.5 (ejemplo con Regresi√≥n Lineal, KNN, Random Forest).")

    st.subheader("Clasificaci√≥n")
    st.write("Clasificaci√≥n de calidad del aire seg√∫n ICA (Buena, Moderada, Mala, Muy Mala).")

    # -> Aqu√≠ ir√°n tus modelos ML cuando est√©n implementados

# ---------------- CONCLUSIONES ----------------
elif menu == "Conclusiones":
    st.title("üìë Conclusiones del Proyecto")

    st.markdown("""
    - **Mayor contaminaci√≥n** detectada en horas pico y zonas de alto flujo vehicular.
    - **Variables cr√≠ticas**: flujo vehicular y condiciones meteorol√≥gicas (humedad y viento).
    - **Modelos ML** permitir√°n predecir la concentraci√≥n de PM2.5 y categorizar la calidad del aire.
    """)